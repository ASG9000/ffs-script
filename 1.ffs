/*

 _______  _______  _______            _______  _______  ______    ___   _______  _______ 
|       ||       ||       |          |       ||       ||    _ |  |   | |       ||       |
|    ___||    ___||  _____|          |  _____||       ||   | ||  |   | |    _  ||_     _|
|   |___ |   |___ | |_____           | |_____ |       ||   |_||_ |   | |   |_| |  |   |  
|    ___||    ___||_____  |          |_____  ||      _||    __  ||   | |    ___|  |   |  
|   |    |   |     _____| |           _____| ||     |_ |   |  | ||   | |   |      |   |  
|___|    |___|    |_______|          |_______||_______||___|  |_||___| |___|      |___|  


*/

// Generated code DO NOT EDIT 

const R = require('ramda');
const folktale = require('folktale');

const {
    adt,
    concurrency,
    conversions,
    core,
    fantasyLand,
    maybe,
    result,
    validation
} = folktale;

const Union = adt.union.union;
const Maybe = folktale.maybe;
const Result = folktale.result;

const { F,
    T,
    add,
    addIndex,
    adjust,
    all,
    allPass,
    always,
    and,
    any,
    anyPass,
    ap,
    aperture,
    append,
    apply,
    applySpec,
    applyTo,
    ascend,
    assoc,
    assocPath,
    binary,
    bind,
    both,
    call,
    chain,
    clamp,
    clone,
    comparator,
    complement,
    compose,
    composeK,
    composeP,
    composeWith,
    concat,
    cond,
    construct,
    constructN,
    contains,
    converge,
    countBy,
    curry,
    curryN,
    dec,
    defaultTo,
    descend,
    difference,
    differenceWith,
    dissoc,
    dissocPath,
    divide,
    drop,
    dropLast,
    dropLastWhile,
    dropRepeats,
    dropRepeatsWith,
    dropWhile,
    either,
    empty,
    endsWith,
    eqBy,
    eqProps,
    equals,
    evolve,
    filter,
    find,
    findIndex,
    findLast,
    findLastIndex,
    flatten,
    flip,
    forEach,
    forEachObjIndexed,
    fromPairs,
    groupBy,
    groupWith,
    gt,
    gte,
    has,
    hasIn,
    hasPath,
    head,
    identical,
    identity,
    ifElse,
    inc,
    includes,
    indexBy,
    indexOf,
    init,
    innerJoin,
    insert,
    insertAll,
    intersection,
    intersperse,
    into,
    invert,
    invertObj,
    invoker,
    is,
    isEmpty,
    isNil,
    join,
    juxt,
    keys,
    keysIn,
    last,
    lastIndexOf,
    length,
    lens,
    lensIndex,
    lensPath,
    lensProp,
    lift,
    liftN,
    lt,
    lte,
    map,
    mapAccum,
    mapAccumRight,
    mapObjIndexed,
    match,
    mathMod,
    max,
    maxBy,
    mean,
    median,
    memoizeWith,
    merge,
    mergeAll,
    mergeDeepLeft,
    mergeDeepRight,
    mergeDeepWith,
    mergeDeepWithKey,
    mergeLeft,
    mergeRight,
    mergeWith,
    mergeWithKey,
    min,
    minBy,
    //modulo,
    move,
    multiply,
    nAry,
    negate,
    none,
    not,
    nth,
    nthArg,
    o,
    objOf,
    of,
    omit,
    once,
    //or,
    otherwise,
    over,
    pair,
    partial,
    partialRight,
    partition,
    path,
    pathEq,
    pathOr,
    pathSatisfies,
    pick,
    pickAll,
    pickBy,
    pipe,
    pipeK,
    pipeP,
    pipeWith,
    pluck,
    prepend,
    product,
    project,
    prop,
    propEq,
    propIs,
    propOr,
    propSatisfies,
    props,
    range,
    reduce,
    reduceBy,
    reduceRight,
    reduceWhile,
    reduced,
    reject,
    remove,
    repeat,
    replace,
    reverse,
    scan,
    sequence,
    //set,
    slice,
    sort,
    sortBy,
    sortWith,
    split,
    splitAt,
    splitEvery,
    splitWhen,
    startsWith,
    subtract,
    sum,
    symmetricDifference,
    symmetricDifferenceWith,
    tail,
    take,
    takeLast,
    takeLastWhile,
    takeWhile,
    tap,
    test,
    then,
    times,
    toLower,
    toPairs,
    toPairsIn,
    toString,
    toUpper,
    transduce,
    transpose,
    traverse,
    trim,
    tryCatch,
    type,
    unapply,
    unary,
    uncurryN,
    unfold,
    union,
    unionWith,
    uniq,
    uniqBy,
    uniqWith,
    unless,
    unnest,
    until,
    update,
    useWith,
    values,
    valuesIn,
    view,
    when,
    where,
    whereEq,
    without,
    xprod,
    zip,
    zipObj,
    zipWith
} = R;

// Ramda helper functions
const log = tap(x => console.log(x));
const rangeOf = apply(range);
const first = nth(0);

// Based on formatunicorn here https://stackoverflow.com/a/18234317
const format = curry((str, args) => {
    const argsObj = cond([
        [is(Array), x => Array.prototype.slice.call(x, 0)],
        [either(is(String), is(Number)), objOf('0')],
        [T, identity]
    ])(args);
    return (str || '').replace(/{([^\}]+)}/g, (match, idx) =>
        propOr(match, idx)(argsObj));
});

// Fixing Ramda(!)
const or = curry((a, b) => R.or(b, a));
const modulo = flip(R.modulo);
const pipeArray = curry((fns, args) => pipe(...fns)(args));

// Folktale helper functions
const orElse = curry((val, maybe) => maybe.getOrElse(val));
const fixPatterns = pipeArray([
    toPairs,
    map(([key, value]) => [key, pipeArray([prop('value'), value])]),
    fromPairs
]);
const matchWith = curry((pattern, result) => {
    return result.matchWith(fixPatterns(pattern));
});
const mapError = curry((fn, result) => result.mapError(fn));

// Fixing JavaScript
parseInt = unary(parseInt); // eslint-disable-line fp/no-mutation
// Calling this getMethod to avoid "func"
const method = curry((name, obj) => Function.prototype.bind(obj, prop(name)(obj)));
const sleep = require('util').promisify(setTimeout);

// Promise.all is not type invariant :/
const promiseAll = promises =>
 (promises && promises.length) ? Promise.all(promises) : Promise.resolve([]);

const promiseMap = curry((fn, xs) =>
 reduce(promise => {
   return promise.then(resps =>
     fn(xs[length(resps)]).then(curResp =>
       append(curResp, resps)));
 }, Promise.resolve([]), xs)
);


///////////////////////////////////////////////////////////////////////
